// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    ADMIN     @map("ADMIN")
    MODERATOR @map("MODERATOR")
    USER      @map("USER")
}

enum Theme {
    SYSTEM @map("SYSTEM")
    LIGHT  @map("LIGHT")
    DARK   @map("DARK")
}

enum FileType {
    IMAGE @map("IMAGE")
    TEXT  @map("TEXT")
    OTHER @map("OTHER")
}

enum ActionLogType {
    INTERGATION_TOKEN_CREATED   @map("INTERGATION_TOKEN_CREATED")
    INTERGATION_TOKEN_REVOKED   @map("INTERGATION_TOKEN_REVOKED")
    UPLOAD_CREATED              @map("UPLOAD_CREATED")
    UPLOAD_DELETED              @map("UPLOAD_DELETED")
    USER_BANNED                 @map("USER_BANNED")
    USER_UNBANNED               @map("USER_UNBANNED")
    USER_SUSPENDED              @map("USER_SUSPENDED")
    USER_UNSUSPENDED            @map("USER_UNSUSPENDED")
    USER_VERIFIED               @map("USER_VERIFIED")
    USER_UNVERIFIED             @map("USER_UNVERIFIED")
    USER_DELETION_REQUESTED     @map("USER_DELETION_REQUESTED")
    USER_ROLE_CHANGED           @map("USER_ROLE_CHANGED")
    USER_STREAMER_MODE_ENABLED  @map("USER_STREAMER_MODE_ENABLED")
    USER_STREAMER_MODE_DISABLED @map("USER_STREAMER_MODE_DISABLED")
    USER_THEME_CHANGED          @map("USER_THEME_CHANGED")
    UNKNOWN                     @map("UNKNOWN")
}

model User {
    id                String             @id @default(uuid())
    displayName       String
    theme             Theme              @default(SYSTEM)
    isBanned          Boolean            @default(false)
    bannedById        String?
    isSuspened        Boolean            @default(false)
    suspendedAt       DateTime?
    suspendedReason   String?
    suspendedUntil    DateTime?
    bannedAt          DateTime?
    bannedReason      String?
    streamerMode      Boolean            @default(false)
    role              Role               @default(USER)
    lastLogin         DateTime           @default(now())
    lastUpload        DateTime           @default(now())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    Upload            Upload[]
    IntergationToken  IntergationToken[]
    ActionLog         ActionLog[]
    pendingDeletion   Boolean            @default(false)
    pendingDeletionAt DateTime?

    @@index([isBanned], name: "isBanned")
    @@index([isSuspened], name: "isSuspened")
}

model Upload {
    id          String      @id @default(uuid())
    name        String
    fileSize    Int         @default(0) // in bytes
    fileType    FileType    @default(OTHER)
    fileName    String
    fileUrl     String
    tags        UploadTag[]
    isDeleted   Boolean     @default(false)
    deleteToken String
    uploader    User        @relation(fields: [uploaderId], references: [id])
    uploaderId  String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime?   @updatedAt

    @@index([uploaderId], name: "uploaderId")
    @@index([name], name: "name")
}

model UploadTag {
    id       String @id @default(uuid())
    name     String
    upload   Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    uploadId String

    @@index([uploadId])
}

model IntergationToken {
    id        String    @id @default(uuid())
    tokenHash String
    label     String    @default("Default Intergation Token Label")
    lastUsed  DateTime?
    expiresAt DateTime?
    isNever   Boolean   @default(true) // aka never expires
    isRevoked Boolean   @default(false)
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([tokenHash], name: "tokenHash")
    @@index([userId], name: "userId")
}

model ActionLog {
    id          String        @id @default(uuid())
    type        ActionLogType @default(UNKNOWN)
    description String
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime      @default(now())

    @@index([userId], name: "userId")
}
